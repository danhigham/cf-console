#!/bin/bash

uuencode=0
binary=1

function untar_payload()
{
  match=$(grep --text --line-number '^PAYLOAD:$' $0 | cut -d ':' -f 1)
  payload_start=$((match + 1))

  if [[ $binary -ne 0 ]]; then
    tail -n +$payload_start $0 | tar -C $HOME -xzvf -
  fi
  if [[ $uuencode -ne 0 ]]; then
    tail -n +$payload_start $0 | uudecode | tar -C $HOME -xzvf -
  fi
}

function start_cmd {
  ruby -ryaml -e 'puts YAML.load(File.read(ARGV[0])).select{ |k,v| k=="start_command" }.collect {|k,v| v }' "$@"
}

untar_payload

# give tmate +x permissions
chmod +x $HOME/bin/tmate

# add lib folder to LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/lib

# generate ssh keys
echo -e 'y\n'|ssh-keygen -q -t rsa -N "" -f /home/vcap/.ssh/id_rsa

$HOME/bin/tmate -S /tmp/tmate.sock new-session -d               # Launch tmate in a detached state
$HOME/bin/tmate -S /tmp/tmate.sock wait tmate-ready             # Blocks until the SSH connection is established

$HOME/bin/tmate -S /tmp/tmate.sock split-window -v
main_pane=${window}.0
command_pane=${window}.1

sshcmd=`$HOME/bin/tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'`
sshcmd=${sshcmd:4}

$HOME/bin/tmate -S /tmp/tmate.sock selectp -t 0

start_command=$(start_cmd /home/vcap/staging_info.yml)

$HOME/bin/tmate -S /tmp/tmate.sock send-keys -t "$main_pane" 'stty_orig=`stty -g`; stty -echo; ps_orig=`echo $PS1`; PS1=""' Enter

$HOME/bin/tmate -S /tmp/tmate.sock send-keys -t "$main_pane" 'cat $HOME/banner.txt' Enter
$HOME/bin/tmate -S /tmp/tmate.sock send-keys -t "$main_pane" "echo \"$sshcmd\"" Enter
$HOME/bin/tmate -S /tmp/tmate.sock send-keys -t "$main_pane" "" Enter

$HOME/bin/tmate -S /tmp/tmate.sock send-keys -t "$main_pane" 'stty $stty_orig; PS1="$ps_orig "' Enter

$HOME/bin/tmate -S /tmp/tmate.sock send-keys -t "$command_pane" "$start_command" Enter

printf "%s\n" "$sshcmd"

exit 0
